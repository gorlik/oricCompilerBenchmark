/* 6502 none linker script. */

SECTIONS {
    .zero : {
    }

/*  INCLUDE ro_sections.ld */
    .text : {
        /* A mechanism for dynamically building an _init script. */
        PROVIDE(_init = .);
        *(.init_first)
        *(SORT_BY_INIT_PRIORITY(.init.* .init))
        *(.init_last)

        /* A mechanism for dynamically building a _fini script. */
        PROVIDE(_fini = .);
        *(.fini_first)
        *(SORT_BY_INIT_PRIORITY(.fini.* .fini))
        *(.fini_last)

        *(.text .text.*)
    }

    .rodata : {
        /* A sorted list of initialization function pointers. Used for GCC
        * constructor attribute and C++ global constructors. */
        __init_array_start = .;
        KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.* .init_array)))
        __init_array_end = .;

        /* A sorted list of finalization function pointers. Used for GCC destructor
        * attribute. */
        __fini_array_start = .;
        KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.* .fini_array)))
        __fini_array_end = .;

        *(.rodata .rodata.*)
    }


/*  INCLUDE rw_sections.ld */
    .data : { *(.data .data.*) }

    __load_end = .;

#     .vector_block_header : {
#         SHORT(0xFFFA)
#         SHORT(6)
#     }
#
#     .vector_block : {
#         SHORT(0)
#         SHORT(_start)
#         SHORT(0)
#     }

/*  INCLUDE noalloc_sections.ld */
    __bss_start = .;
    .bss (NOLOAD) : { *(.bss .bss.* COMMON) }
    __bss_end = .;
    .noinit (NOLOAD) : { *(.noinit .noinit.*) }

    __heap_start = .;
}

/* Provide imaginary (zero page) registers. */
PROVIDE(__rc0 = 0x0000);

/*  INCLUDE imag_regs.ld */
    __rc1 = __rc0 + 1;
    PROVIDE(__rc2 = __rc1 + 1);
    __rc3 = __rc2 + 1;
    PROVIDE(__rc4 = __rc3 + 1);
    __rc5 = __rc4 + 1;
    PROVIDE(__rc6 = __rc5 + 1);
    __rc7 = __rc6 + 1;
    PROVIDE(__rc8 = __rc7 + 1);
    __rc9 = __rc8 + 1;
    PROVIDE(__rc10 = __rc9 + 1);
    __rc11 = __rc10 + 1;
    PROVIDE(__rc12 = __rc11 + 1);
    __rc13 = __rc12 + 1;
    PROVIDE(__rc14 = __rc13 + 1);
    __rc15 = __rc14 + 1;
    PROVIDE(__rc16 = __rc15 + 1);
    __rc17 = __rc16 + 1;
    PROVIDE(__rc18 = __rc17 + 1);
    __rc19 = __rc18 + 1;
    PROVIDE(__rc20 = __rc19 + 1);
    __rc21 = __rc20 + 1;
    PROVIDE(__rc22 = __rc21 + 1);
    __rc23 = __rc22 + 1;
    PROVIDE(__rc24 = __rc23 + 1);
    __rc25 = __rc24 + 1;
    PROVIDE(__rc26 = __rc25 + 1);
    __rc27 = __rc26 + 1;
    PROVIDE(__rc28 = __rc27 + 1);
    __rc29 = __rc28 + 1;
    PROVIDE(__rc30 = __rc29 + 1);
    __rc31 = __rc30 + 1;

ASSERT(__rc0 == 0x0000, "Inconsistent zero page map.")
ASSERT(__rc31 == 0x001f, "Inconsistent zero page map.")

/* Set initial soft stack address to just above last memory address. (It grows down.) */
__stacksize = 0x0400;
__stack = 0x8000+__stacksize;
